@using Snappet.Challenge.Web.Mvc.Extensions
@model Snappet.Challenge.Web.Mvc.ViewModels.ActivityViewModel
@{
    ViewBag.Title = "Dagoverzicht";
}

<div class="row">
    <div class="col-md-4">
        <h2>Dagoverzicht klas</h2>
        <p>
            <span data-bind="text: moment(timeOfDay()).format('DD-MM-YYYY HH:mm')"></span>
        </p>
    </div>
    <div class="col-md-8">
        <div id="chart_div_class"></div>
        <div>
            Aantal gemaakte opgaven
            <ul data-bind="foreach: classActivity">
                <li><span data-bind="text: Subject"></span>:<span data-bind="text: NrOfSubmittedAnswers"></span></li>
            </ul>
        </div>
    </div>       
</div>
<div class="row">
    <div class="col-md-4">
    </div>
</div>

<div class="row">
    <div class="col-md-4">
        Leerling
        <ul data-bind="foreach: students">
            <li><a href="#" data-bind="click: $root.studentClick">Leerling <span data-bind="text: Id"></span></a></li>            
        </ul>
    </div>
    <div class="col-md-8">
        <div id="chart_div_student"></div>
        <div data-bind="visible:studentActivity().length">
            Aantal gemaakte opgaven
            <ul data-bind="foreach: studentActivity">
                <li><span data-bind="text: Subject"></span>:<span data-bind="text: NrOfSubmittedAnswers"></span></li>
            </ul>

        </div>
    </div>    
</div>


@section Scripts {  
    
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/datehandling")
     
    <script>
        google.load('visualization', '1', { packages: ['corechart', 'bar'] });
        google.setOnLoadCallback(drawClassGraph);

        function drawGraph(progressData, graphTitle, elementId) {
            var options = {
                title: graphTitle,
                chartArea: { width: '50%' },
                hAxis: {
                    title: 'Voortgang',
                    minValue: 0
                },
                vAxis: {
                    title: 'Onderwerp'
                }
            };

            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Onderwerp');
            data.addColumn('number', 'Voortgang');
            $.each(progressData, function (key, value) {
                data.addRows([
                    [value.Subject, value.Progress]
                ]);

            });
            var chart = new google.visualization.BarChart(document.getElementById(elementId));
            chart.draw(data, options);
        }

        function drawClassGraph() {
            drawGraph(ko.toJS(indexViewModel.classActivity), 'Voortgang van klas', 'chart_div_class');
        }

        function drawStudentGraph() {
            drawGraph(ko.toJS(indexViewModel.studentActivity), 'Voortgang van leerling ' + indexViewModel.studentId(), 'chart_div_student');
        }


        function IndexViewModel() {
            var self = this;

            self.timeOfDay = ko.mapping.fromJS(@Html.Raw(Model.DateTimeStamp.ToJson()));
            self.students = ko.mapping.fromJS(@Html.Raw(Model.Students.ToJson()));
            self.classActivity = ko.mapping.fromJS(@Html.Raw(Model.ClassActivity.ToJson()));
            self.studentActivity = ko.observableArray();
            self.studentId = ko.observable();
            self.studentClick = function (model) {
                $.ajax({
                    url: '/Activity/GetStudentActivityForTimeOnDay',
                    type: "POST",
                    contentType: "application/json",
                    data: "{'studentId':" + model.Id() + ", 'dateTimeStamp': " + ko.toJSON(indexViewModel.timeOfDay) + "}",
                    success: function (data) {
                        ko.mapping.fromJS(data.StudentActivity, {}, self.studentActivity);
                        ko.mapping.fromJS(data.StudentId, {}, self.studentId);
                        drawStudentGraph();
                    },
                    error: function () {
                        alert("Er is een fout opgetreden.");
                    }
                });
            }
        }
        
        var indexViewModel = new IndexViewModel();
        $(function () {
            ko.applyBindings(indexViewModel);
        });

    </script>
}