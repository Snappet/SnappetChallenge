// <auto-generated />
using System;
using ClassMonitor.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClassMonitor.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("ClassMonitor.Core.DomainAggregate.Domain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("ClassMonitor.Core.LearningObjectiveAggregate.LearningObjective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LearningObjectives");
                });

            modelBuilder.Entity("ClassMonitor.Core.SubjectAggregate.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("ClassMonitor.Core.UserAggregate.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClassMonitor.Core.WorkAggregate.Work", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SubmitDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Correct")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Difficulty")
                        .HasColumnType("REAL");

                    b.Property<int>("DomainId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LearningObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Progress")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubmittedAnswerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "ExerciseId", "SubmitDateTime");

                    b.HasIndex("DomainId");

                    b.HasIndex("LearningObjectiveId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Work");
                });

            modelBuilder.Entity("ClassMonitor.Core.WorkAggregate.Work", b =>
                {
                    b.HasOne("ClassMonitor.Core.DomainAggregate.Domain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassMonitor.Core.LearningObjectiveAggregate.LearningObjective", "LearningObjective")
                        .WithMany()
                        .HasForeignKey("LearningObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassMonitor.Core.SubjectAggregate.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassMonitor.Core.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");

                    b.Navigation("LearningObjective");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
